{"version":3,"sources":["components/MessageForm.jsx","components/MyMessage.jsx","components/TheirMessage.jsx","components/ChatFeed.jsx","components/LoginForm.jsx","App.js","index.js"],"names":["MessageForm","props","useState","value","setValue","chatId","creds","handleSubmit","event","preventDefault","text","trim","length","sendMessage","className","onSubmit","placeholder","onChange","target","isTyping","htmlFor","PictureOutlined","type","multiple","id","style","display","files","bind","SendOutlined","onClick","localStorage","clear","window","location","reload","MyMessage","message","attachments","src","file","alt","float","marginRight","color","backgroundColor","TheirMessage","lastMessage","isFirstMessageByUser","sender","username","backgroundImage","avatar","marginLeft","ChatFeed","chats","activeChat","userName","messages","chat","renderReadReceipts","isMyMessage","people","map","person","index","last_read","title","keys","Object","key","lastMessageKey","width","renderMessages","height","LoginForm","setUsername","password","setPassword","error","setError","e","a","authObject","axios","get","headers","setItem","required","align","App","getItem","userSecret","projectID","renderChatFeed","chatAppProps","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.96c8e377.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { sendMessage, isTyping } from \"react-chat-engine\";\r\nimport { SendOutlined, PictureOutlined } from \"@ant-design/icons\";\r\n\r\nconst MessageForm = (props) => {\r\n  const [value, setValue] = useState(\"\");\r\n  const { chatId, creds } = props;\r\n\r\n  const handleChange = (event) => {\r\n    setValue(event.target.value);\r\n\r\n    isTyping(props, chatId);\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    const text = value.trim();\r\n\r\n    if (text.length > 0) {\r\n      sendMessage(creds, chatId, { text });\r\n    }\r\n\r\n    setValue(\"\");\r\n  };\r\n\r\n  const handleUpload = (event) => {\r\n    sendMessage(creds, chatId, { files: event.target.files, text: \"\" });\r\n  };\r\n\r\n  return (\r\n    <form className=\"message-form\" onSubmit={handleSubmit}>\r\n      <input\r\n        className=\"message-input\"\r\n        placeholder=\"Send a message...\"\r\n        value={value}\r\n        onChange={handleChange}\r\n        onSubmit={handleSubmit}\r\n      />\r\n      <label htmlFor=\"upload-button\">\r\n        <span className=\"image-button\">\r\n          <PictureOutlined className=\"picture-icon\" />\r\n        </span>\r\n      </label>\r\n      <input\r\n        type=\"file\"\r\n        multiple={false}\r\n        id=\"upload-button\"\r\n        style={{ display: \"none\" }}\r\n        onChange={handleUpload.bind(this)}\r\n      />\r\n      <button type=\"submit\" className=\"send-button\">\r\n        <SendOutlined className=\"send-icon\" />\r\n      </button>\r\n      <button\r\n        className=\"logout\"\r\n        type=\"submit\"\r\n        onClick={() => {\r\n          localStorage.clear();\r\n          window.location.reload(true);\r\n        }}\r\n      >\r\n        Leave Chat\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default MessageForm;\r\n","import React from \"react\";\r\n\r\nconst MyMessage = ({ message }) => {\r\n  // daca mesajul e imagine facem asta\r\n  if (message?.attachments?.length > 0) {\r\n    return (\r\n      <img\r\n        src={message.attachments[0].file}\r\n        alt=\"message-attachments\"\r\n        className=\"message-image\"\r\n        style={{ float: \"right\" }}\r\n      />\r\n    );\r\n  }\r\n  //   daca mesajul e text SI EL AL NOSTRU facem asta\r\n  return(\r\n  <div className = \"message\" style = {{float : 'right' , marginRight : \"18px\" , color : \"white\" , backgroundColor : \"#3B2A50\"}}>\r\n     {message.text}\r\n  </div>)\r\n};\r\n\r\nexport default MyMessage;\r\n","import React from \"react\";\r\n\r\nconst TheirMessage = ({ lastMessage, message }) => {\r\n  const isFirstMessageByUser = !lastMessage || lastMessage.sender.username !== message.sender.username;\r\n\r\n  return (\r\n    <div className=\"message-row\">\r\n      {isFirstMessageByUser && (\r\n        <div\r\n          className=\"message-avatar\"\r\n          style={{ backgroundImage: message.sender && `url(${message.sender.avatar})` }}\r\n        />\r\n      )}\r\n      {message.attachments && message.attachments.length > 0\r\n        ? (\r\n          <img\r\n            src={message.attachments[0].file}\r\n            alt=\"message-attachment\"\r\n            className=\"message-image\"\r\n            style={{ marginLeft: isFirstMessageByUser ? '4px' : '48px' }}\r\n          />\r\n        )\r\n        : (\r\n          <div className=\"message\" style={{ float: 'left', backgroundColor: '#CABCDC', marginLeft: isFirstMessageByUser ? '4px' : '48px' }}>\r\n            {message.text}\r\n          </div>\r\n        )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TheirMessage;\r\n","import React from \"react\";\r\nimport MessageForm from \"./MessageForm\";\r\nimport MyMessage from \"./MyMessage\";\r\nimport TheirMessage from \"./TheirMessage\";\r\n\r\n// const ChatFeed = (props) => {\r\n//   const { chats, activeChat, username, messages } = props;\r\n//   const chat = chats && chats[activeChat];\r\n\r\n//   const renderReadReceipts = (message, isMyMessage) => chat.people.map((person, index) =>person.last_read === message.id && (\r\n//           <div\r\n//             key={`read_${index}`}\r\n//             className=\"read-receipt\"\r\n//             style={{\r\n//               float: isMyMessage ? \"right\" : \"left\",\r\n//               backgroundImage:\r\n//                 person.person.avatar && `url(${person.person.avatar})`,\r\n//             }}\r\n//           />\r\n//         )\r\n//     );\r\n\r\n//   const renderMessages = () => {\r\n//     const keys = Object.keys(messages); //keys in cazul nostru sunt id urile mesajelor\r\n\r\n//     return keys.map((key, index) => {\r\n//       const message = messages[key]; //din props lum un message cu un key\r\n//       const lastMessageKey = index === 0 ? null : keys[index - 1];\r\n//       const isMyMessage = username === message.sender.username;\r\n\r\n//       return (\r\n//         <div key={`msg_${index}`} style={{ width: \"100%\" }}>\r\n//           <div className=\"message-block\">\r\n//             {isMyMessage\r\n//              ? <MyMessage message={message} />\r\n//              : <TheirMessage\r\n//                 message={message}\r\n//                 lastMessage={messages[lastMessageKey]}\r\n//               />\r\n//             }\r\n//           </div>\r\n//           <div\r\n//             className=\"read-receipts\"\r\n//             style={{\r\n//               marginRight: isMyMessage ? \"18px\" : \"0px\",\r\n//               marginLeft: isMyMessage ? \"0px\" : \"68px\"}}\r\n//           >\r\n//             {renderReadReceipts(message, isMyMessage)}\r\n//           </div>\r\n//         </div>\r\n//       );\r\n//     });\r\n//   };\r\n\r\n//   if (!chat) return <div/>;\r\n//   return (\r\n//     <div className=\"chat-feed\">\r\n//       <div className=\"chat-title-container\">\r\n//         <div className=\"chat-title\">{chat?.title}</div>\r\n//         <div className=\"chat-subtitle\">\r\n//           {chat.people.map((person) => `${person.person.username}`)}\r\n//           {/* person.person.username e din chat de mai sus */}\r\n//         </div>\r\n//       </div>\r\n//       {renderMessages()}\r\n//       <div style={{ height: \"100px\" }} />\r\n//       {/*creem un spatiu intre elemente*/}\r\n//       {/* forma in care scrie un user mesajele */}\r\n//       <div className=\"message-form-container\">\r\n//         <MessageForm {...props} chatId={activeChat} />\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\nconst ChatFeed = (props) => {\r\n  const { chats, activeChat, userName, messages } = props;\r\n\r\n  const chat = chats && chats[activeChat];\r\n\r\n  const renderReadReceipts = (message, isMyMessage) =>\r\n    chat.people.map(\r\n      (person, index) =>\r\n        person.last_read === message.id && (\r\n          <div\r\n            key={`read_${index}`}\r\n            className=\"read-receipt\"\r\n            style={{\r\n              float: isMyMessage ? \"right\" : \"left\",\r\n              backgroundImage:\r\n                person.person.avatar && `url(${person.person.avatar})`,\r\n            }}\r\n          />\r\n        )\r\n    );\r\n\r\n  const renderMessages = () => {\r\n    const keys = Object.keys(messages);\r\n\r\n    return keys.map((key, index) => {\r\n      const message = messages[key];\r\n      const lastMessageKey = index === 0 ? null : keys[index - 1];\r\n      const isMyMessage = userName === message.sender.username;\r\n\r\n      return (\r\n        <div key={`msg_${index}`} style={{ width: \"100%\" }}>\r\n          <div className=\"message-block\">\r\n            {isMyMessage ? (\r\n              <MyMessage message={message} />\r\n            ) : (\r\n              <TheirMessage\r\n                message={message}\r\n                lastMessage={messages[lastMessageKey]}\r\n              />\r\n            )}\r\n          </div>\r\n          <div\r\n            className=\"read-receipts\"\r\n            style={{\r\n              marginRight: isMyMessage ? \"18px\" : \"0px\",\r\n              marginLeft: isMyMessage ? \"0px\" : \"68px\",\r\n            }}\r\n          >\r\n            {renderReadReceipts(message, isMyMessage)}\r\n          </div>\r\n        </div>\r\n      );\r\n    });\r\n  };\r\n\r\n  if (!chat) return <div />;\r\n\r\n  return (\r\n    <div className=\"chat-feed\">\r\n      <div className=\"chat-title-container\">\r\n        <div className=\"chat-title\">{chat?.title}</div>\r\n        <div className=\"chat-subtitle\">\r\n          {chat.people.map((person) => ` ${person.person.username}`)}\r\n        </div>\r\n      </div>\r\n      {renderMessages()}\r\n      <div style={{ height: \"100px\" }} />\r\n      <div className=\"message-form-container\">\r\n        <MessageForm {...props} chatId={activeChat} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatFeed;\r\n","import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst LoginForm = () => {\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [error , setError] = useState('')\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    const authObject = {\r\n      \"Project-ID\": \"4a857eac-6400-47aa-9bea-337ab1bfafd0\",\r\n      \"User-Name\": username,\r\n      \"User-Secret\": password,\r\n    };\r\n\r\n    try {\r\n        // username /password face un req la chatengine si daca acestea exista primim mesaje\r\n      await axios.get(\"https://api.chatengine.io/chats\" , {headers : authObject})\r\n    //   daca get de mai sus functioneaza\r\n    localStorage.setItem('username' , username)\r\n    localStorage.setItem('password' , password)\r\n\r\n    window.location.reload()//facem reload la pagina pentru ca  \r\n    } catch {}\r\n    // daca  avem eroare\r\n    setError('Try again with the right Username / Password')\r\n  };\r\n\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <div className=\"form\">\r\n        <h1 className=\"title\">Welcome to ChatAlot</h1>\r\n        <form onSubmit={handleSubmit}>\r\n          <input\r\n            type=\"text\"\r\n            value={username}\r\n            onChange={(e) => setUsername(e.target.value)}\r\n            className=\"input\"\r\n            placeholder=\"username\"\r\n            required\r\n          />\r\n          <input\r\n            type=\"password\"\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            className=\"input\"\r\n            placeholder=\"password\"\r\n            required\r\n          />\r\n          <div align=\"center\">\r\n            <button type=\"submit\" className=\"button\">\r\n              <span>Ready to ChatAlot</span>\r\n            </button>\r\n            <h4>(username : theBoss , password : 1234)</h4>\r\n          </div>\r\n         <h2 className = \"error\">{error}</h2>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginForm;\r\n","import React from \"react\";\r\nimport { ChatEngine } from \"react-chat-engine\";\r\nimport \"./App.css\";\r\nimport ChatFeed from \"./components/ChatFeed\";\r\nimport LoginForm from \"./components/LoginForm\";\r\n\r\nconst App = () => {\r\n  if(!localStorage.getItem('username')) return <LoginForm/>\r\n  return (\r\n    <ChatEngine\r\n      height=\"100vh\"\r\n      userName= {localStorage.getItem('username')}\r\n      userSecret= {localStorage.getItem('password')}\r\n      projectID=\"4a857eac-6400-47aa-9bea-337ab1bfafd0\"\r\n      renderChatFeed={(chatAppProps) => <ChatFeed {...chatAppProps}/>}\r\n    />\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\n\r\nimport App from './App'\r\n\r\nReactDOM.render(<App/> , document.getElementById('root'))\r\n\r\n"],"sourceRoot":""}